'''
26 Nov 2018
Scratch file for generating minimal "grasp" depth image dataset
Applying Faster-RCNN algorithm
nrw
'''

'''
Assumptions
# 300x400 black 'depth image'
# 25x25 square 'blocks' (vary size, orientation) 
# true grasps are parameterized by center and orientation (1 true grasp per square)
# store as numpy array (later pytorch array for GPU)
# ? 2 layer with faster-rcnn using pytorch ?
# start with default pytorch CNN
# start with n = 10 images 

'''

import numpy as np
from PIL import Image, ImageDraw

import torch 
import torch.nn as nn
import torchvision
import torchvision.transforms as transforms

# ----- EXAMPLE -----
# img = Image.new('RGBA', (200,200), 'white')
# idraw = ImageDraw.Draw(img)
# idraw.rectangle((10, 10, 100, 100), fill='blue') #top left corner, and size?
# PIL.ImageDraw.Draw.rectangle(xy, fill=None, outline=None)
#
#    Draws a rectangle.
#    Parameters:
#
#        xy – Four points to define the bounding box. Sequence of either [(x0, y0), (x1, y1)] or [x0, y0, x1, y1]. The second point is just outside the drawn rectangle.
#        outline – Color to use for the outline.
#        fill – Color to use for the fill.
#

# https://pillow.readthedocs.io/en/3.1.x/reference/ImageDraw.html
# idraw.polygon([(60,60), (90,60), (90,90), (60,90)], fill="red", outline="green")

# img.save('rectangle.png')
# 
# np.random.rand(m, n)
# np.random.randint(low, high, size=(m,n))
# ----- ------  


# height and width of camera image (in pixels)
H,W = 300,400
# length and width of blocks (fixed for now) 
block_l, block_w = 25, 25 
# block_minl, block_minw = 20, 20

# number of images
num_images = 10  

# list containing PIL Image objects?
img_list = [] 
truth_coords = []

# 3 random numbers per image - x,y location, and orientation 
# Y/N: should orientation be chunked by 15 degrees = 24 options? (YES)
# TODO: implement rotated rectangles later 
# TODO: implement blocks that are halfway off-image

for i in range(num_images):
    img = Image.new('RGBA', (H, W), 'gray')

    rand_x = np.random.randint(0, W)
    rand_y = np.random.randint(0, H)

    idraw = ImageDraw.Draw(img)
    # top left x,y and then bottom right x,y
    #idraw.rectangle((10,10, i*10, i*8), fill='white')
    idraw.rectangle((rand_x, rand_y, rand_x+block_l, rand_y+block_w), fill='white')

    img_list.append(idraw)
    truth_coords.append((rand_x, rand_y))
    #img.save('rect'+str(i)+'.png')

#print(truth_coords)

#####
# Create pytorch dataloader 
#####


# data loader example 
# 1) create new "rectangle" class which subclasses pytorch "Dataset" class
# 2) use torch.utils.data.DataLoader and specify the batch size etc.
# 3) enumerate to step through the data and update gradients

# 1) create __len__ and __getitem__ functions
class RectDepthImgsDataset(Dataset):
    """Artificially generated depth images dataset"""

    def __init__(self, csv_file, root_dir, transform=None):
        """
        Args:
            csv_file (string): Path to the csv file with annotations.
            root_dir (string): Directory with all the images.
            transform (callable, optional): Optional transform to be applied
                on a sample.
        """
        self.landmarks_frame = pd.read_csv(csv_file)
        self.root_dir = root_dir
        self.transform = transform

    def __len__(self):
        return len(self.landmarks_frame)

    def __getitem__(self, idx):
        img_name = os.path.join(self.root_dir,
                                self.landmarks_frame.iloc[idx, 0])
        image = io.imread(img_name)
        landmarks = self.landmarks_frame.iloc[idx, 1:].as_matrix()
        landmarks = landmarks.astype('float').reshape(-1, 2)
        # sample = {'image': image, 'landmarks': landmarks}
        sample = {'image': image, 'truth': truecoords}

        # for i, (images, labels) in enumerate(train_loader):

        if self.transform:
            sample = self.transform(sample)

        return sample


transformed_dataset = FaceLandmarksDataset(csv_file='faces/face_landmarks.csv',
                                           root_dir='faces/',
                                           transform=transforms.Compose([
                                               Rescale(256), RandomCrop(224),
                                               ToTensor() ]))

# 2) dataloader = DataLoader(transformed_dataset, batch_size=4, shuffle=True, num_workers=4)
# 3)  for i, (images, labels) in enumerate(train_loader):



#####
# Set up CNN
#####
# train_dataset = torchvision.datasets.MNIST(root='./data/', train=True,
# transform=transforms.ToTensor(), download=True)

# Data loader
# train_loader = torch.utils.data.DataLoader(dataset=train_dataset, batch_size=batch_size,
                                           # shuffle=True)

# test_loader = torch.utils.data.DataLoader(dataset=test_dataset, batch_size=batch_size,
                                          # shuffle=False)

# Device configuration
device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')

# Hyper parameters
num_epochs = 5
num_classes = 10
batch_size = 100
learning_rate = 0.001

# Convolutional neural network (two convolutional layers)
class ConvNet(nn.Module):
    def __init__(self, num_classes=10):
        super(ConvNet, self).__init__()
        self.layer1 = nn.Sequential(
            nn.Conv2d(1, 16, kernel_size=5, stride=1, padding=2),
            nn.BatchNorm2d(16),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2, stride=2))
        self.layer2 = nn.Sequential(
            nn.Conv2d(16, 32, kernel_size=5, stride=1, padding=2),
            nn.BatchNorm2d(32),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2, stride=2))
        self.fc = nn.Linear(7*7*32, num_classes)
        
    def forward(self, x):
        out = self.layer1(x)
        out = self.layer2(out)
        out = out.reshape(out.size(0), -1)
        out = self.fc(out)
        return out

model = ConvNet(num_classes).to(device)

# Loss and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)

# Train the model
total_step = len(train_loader)
for epoch in range(num_epochs):
    for i, (images, labels) in enumerate(train_loader):
        images = images.to(device)
        labels = labels.to(device)
        
        # Forward pass
        outputs = model(images)
        loss = criterion(outputs, labels)
        
        # Backward and optimize
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        
        if (i+1) % 100 == 0:
            print ('Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}' 
                   .format(epoch+1, num_epochs, i+1, total_step, loss.item()))

# Test the model
model.eval()  # eval mode (batchnorm uses moving mean/variance instead of mini-batch mean/variance)
with torch.no_grad():
    correct = 0
    total = 0
    for images, labels in test_loader:
        images = images.to(device)
        labels = labels.to(device)
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

    print('Test Accuracy of the model on the 10000 test images: {} %'.format(100 * correct / total))

# Save the model checkpoint
torch.save(model.state_dict(), 'model.ckpt')
